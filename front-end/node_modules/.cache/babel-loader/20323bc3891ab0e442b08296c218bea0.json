{"ast":null,"code":"var _jsxFileName = \"/Users/acaciano/Projects/2a/55PBXTest/front-end/src/hooks/toast.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useCallback, useContext, useState } from 'react';\nimport { uuid } from 'uuidv4';\nimport ToastContainer from '../components/ToastContainer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ToastContext = /*#__PURE__*/createContext({});\n\nconst ToastProvider = ({\n  children\n}) => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const addToast = useCallback(({\n    type,\n    title,\n    description\n  }) => {\n    const id = uuid();\n    const toast = {\n      id,\n      type,\n      title,\n      description\n    };\n    setMessages(state => [...state, toast]);\n  }, []);\n  const removeToast = useCallback(id => {\n    setMessages(state => state.filter(message => message.id != id));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ToastContext.Provider, {\n    value: {\n      addToast,\n      removeToast\n    },\n    children: [children, /*#__PURE__*/_jsxDEV(ToastContainer, {\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ToastProvider, \"B21RFwG32JC+fV89pZ9By69CAIM=\");\n\n_c = ToastProvider;\n\nfunction useToast() {\n  _s2();\n\n  const context = useContext(ToastContext);\n\n  if (!context) {\n    throw new Error('useToast must be used within a ToastProvider');\n  }\n\n  return context;\n}\n\n_s2(useToast, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport { ToastProvider, useToast };\n\nvar _c;\n\n$RefreshReg$(_c, \"ToastProvider\");","map":{"version":3,"sources":["/Users/acaciano/Projects/2a/55PBXTest/front-end/src/hooks/toast.tsx"],"names":["React","createContext","useCallback","useContext","useState","uuid","ToastContainer","ToastContext","ToastProvider","children","messages","setMessages","addToast","type","title","description","id","toast","state","removeToast","filter","message","useToast","context","Error"],"mappings":";;;;AAAA,OAAOA,KAAP,IAA0BC,aAA1B,EAAyCC,WAAzC,EAAsDC,UAAtD,EAAkEC,QAAlE,QAAkF,OAAlF;AACA,SAASC,IAAT,QAAqB,QAArB;AAEA,OAAOC,cAAP,MAA2B,8BAA3B;;AAeA,MAAMC,YAAY,gBAAGN,aAAa,CAAmB,EAAnB,CAAlC;;AAEA,MAAMO,aAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAE9C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAiB,EAAjB,CAAxC;AAEA,QAAMQ,QAAQ,GAAGV,WAAW,CAAC,CAAC;AAAEW,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAD,KAA4D;AACrF,UAAMC,EAAE,GAAGX,IAAI,EAAf;AACA,UAAMY,KAAK,GAAG;AACVD,MAAAA,EADU;AAEVH,MAAAA,IAFU;AAGVC,MAAAA,KAHU;AAIVC,MAAAA;AAJU,KAAd;AAOAJ,IAAAA,WAAW,CAACO,KAAK,IAAI,CAAC,GAAGA,KAAJ,EAAWD,KAAX,CAAV,CAAX;AAEH,GAX2B,EAWzB,EAXyB,CAA5B;AAaA,QAAME,WAAW,GAAGjB,WAAW,CAAEc,EAAD,IAAgB;AAC5CL,IAAAA,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACE,MAAN,CAAaC,OAAO,IAAIA,OAAO,CAACL,EAAR,IAAcA,EAAtC,CAAV,CAAX;AACH,GAF8B,EAE5B,EAF4B,CAA/B;AAIA,sBACI,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEJ,MAAAA,QAAF;AAAYO,MAAAA;AAAZ,KAA9B;AAAA,eACKV,QADL,eAEI,QAAC,cAAD;AAAgB,MAAA,QAAQ,EAAEC;AAA1B;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CA3BD;;GAAMF,a;;KAAAA,a;;AA6BN,SAASc,QAAT,GAAoB;AAAA;;AAChB,QAAMC,OAAO,GAAGpB,UAAU,CAACI,YAAD,CAA1B;;AAEA,MAAI,CAACgB,OAAL,EAAc;AACV,UAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACH;;AAED,SAAOD,OAAP;AACH;;IARQD,Q;;AAUT,SAASd,aAAT,EAAwBc,QAAxB","sourcesContent":["import React, { Children, createContext, useCallback, useContext, useState } from 'react';\nimport { uuid } from 'uuidv4';\n\nimport ToastContainer from '../components/ToastContainer';\n\n\nexport interface ToastMessage {\n    id: string,\n    type?: \"success\" | \"error\" | \"info\";\n    title: string;\n    description?: string;\n}\n\ninterface ToastContextData {\n    addToast(message: Omit<ToastMessage, 'id'>): void;\n    removeToast(id: string): void;\n}\n\nconst ToastContext = createContext<ToastContextData>({} as ToastContextData);\n\nconst ToastProvider: React.FC = ({ children }) => {\n\n    const [messages, setMessages] = useState<ToastMessage[]>([]);\n\n    const addToast = useCallback(({ type, title, description }: Omit<ToastMessage, 'id'>) => {\n        const id = uuid();\n        const toast = {\n            id,\n            type,\n            title,\n            description\n        };\n\n        setMessages(state => [...state, toast]);\n\n    }, []);\n    \n    const removeToast = useCallback((id: string) => {\n        setMessages(state => state.filter(message => message.id != id));\n    }, []);\n\n    return (\n        <ToastContext.Provider value={{ addToast, removeToast }}>\n            {children}\n            <ToastContainer messages={messages} />\n        </ToastContext.Provider>\n    );\n};\n\nfunction useToast() {\n    const context = useContext(ToastContext);\n\n    if (!context) {\n        throw new Error('useToast must be used within a ToastProvider')\n    }\n\n    return context;\n}\n\nexport { ToastProvider, useToast };"]},"metadata":{},"sourceType":"module"}