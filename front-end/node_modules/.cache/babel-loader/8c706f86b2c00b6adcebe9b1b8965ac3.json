{"ast":null,"code":"var _jsxFileName = \"/Users/acaciano/Projects/2a/55PBXTest/front-end/src/components/Input/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { FiAlertCircle } from 'react-icons/fi';\nimport { useField } from '@unform/core';\nimport { Container, Error } from './styles';\nimport { cellPhone, currency, zipCode } from './masks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\n\nconst Input = ({\n  name,\n  icon: Icon,\n  mask,\n  ...rest\n}) => {\n  _s();\n\n  const inputRef = useRef(null);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n  const {\n    fieldName,\n    defaultValue,\n    error,\n    registerField\n  } = useField(name);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    });\n  }, [fieldName, registerField]);\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n  const handleInputBlur = useCallback(() => {\n    var _inputRef$current;\n\n    setIsFocused(false);\n\n    if ((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value) {\n      setIsFilled(true);\n    } else {\n      setIsFilled(false);\n    }\n  }, []);\n  const handleInputKeyUp = useCallback(e => {\n    if (mask === 'zipCode') {\n      zipCode(e);\n    } else if (mask === 'currency') {\n      currency(e);\n    } else if (mask === 'cellPhone') {\n      cellPhone(e);\n    }\n  }, [mask]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    isErrored: !!error,\n    isFilled: isFilled,\n    isFocused: isFocused,\n    children: [Icon && /*#__PURE__*/_jsxDEV(Icon, {\n      size: 20\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onFocus: handleInputFocus,\n      onBlur: handleInputBlur,\n      onKeyUp: handleInputKeyUp,\n      defaultValue: defaultValue,\n      ref: inputRef,\n      ...rest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(Error, {\n      title: error,\n      children: /*#__PURE__*/_jsxDEV(FiAlertCircle, {\n        color: \"#c53030\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Input, \"hNtjryMcWjnhMmaXMtAZutUI9gM=\", false, function () {\n  return [useField];\n});\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/Users/acaciano/Projects/2a/55PBXTest/front-end/src/components/Input/index.tsx"],"names":["React","useEffect","useRef","useState","useCallback","FiAlertCircle","useField","Container","Error","cellPhone","currency","zipCode","Input","name","icon","Icon","mask","rest","inputRef","isFocused","setIsFocused","isFilled","setIsFilled","fieldName","defaultValue","error","registerField","ref","current","path","handleInputFocus","handleInputBlur","value","handleInputKeyUp","e"],"mappings":"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","sourcesContent":["import React, { InputHTMLAttributes, useEffect, useRef, useState, useCallback } from 'react';\nimport { IconBaseProps } from 'react-icons'\nimport { FiAlertCircle } from 'react-icons/fi'\nimport { useField } from '@unform/core';\nimport { Container, Error } from './styles';\nimport { cellPhone, currency, zipCode } from './masks';\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n    name: string,\n    icon: React.ComponentType<IconBaseProps>,\n    mask?: 'zipCode' | 'currency' | 'cellPhone'\n};\n\nconst Input: React.FC<InputProps> = ({ name, icon: Icon, mask, ...rest }) => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    const [isFocused, setIsFocused] = useState(false);\n    const [isFilled, setIsFilled] = useState(false);\n\n    const { fieldName, defaultValue, error, registerField } = useField(name);\n\n    useEffect(() => {\n        registerField({\n            name: fieldName,\n            ref: inputRef.current,\n            path: 'value'\n        });\n    }, [fieldName, registerField]);\n\n    const handleInputFocus = useCallback(() => {\n        setIsFocused(true);\n    }, []);\n\n    const handleInputBlur = useCallback(() => {\n        setIsFocused(false);\n\n        if (inputRef.current?.value) {\n            setIsFilled(true);\n        } else {\n            setIsFilled(false);\n        }\n\n    }, []);\n\n    const handleInputKeyUp = useCallback(\n        (e: React.FormEvent<HTMLInputElement>) => {\n            if (mask === 'zipCode') {\n                zipCode(e);\n            } else if (mask === 'currency') {\n                currency(e);\n            } else if (mask === 'cellPhone') {\n                cellPhone(e);\n            }\n        }, [mask]\n    );\n\n    return (\n        <Container isErrored={!!error} isFilled={isFilled} isFocused={isFocused}>\n            {Icon && <Icon size={20} />}\n\n            <input\n                onFocus={handleInputFocus}\n                onBlur={handleInputBlur}\n                onKeyUp={handleInputKeyUp}\n                defaultValue={defaultValue}\n                ref={inputRef}\n                {...rest}\n            />\n\n            {error && <Error title={error}>\n                <FiAlertCircle color=\"#c53030\" />\n            </Error>}\n        </Container>\n    );\n};\n\nexport default Input;"]},"metadata":{},"sourceType":"module"}